"use strict";
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@aws-amplify/core");
var InternalAuth_1 = require("./internals/InternalAuth");
/**
 * Provide authentication steps
 */
var AuthClass = /** @class */ (function (_super) {
    tslib_1.__extends(AuthClass, _super);
    function AuthClass() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AuthClass.prototype.getModuleName = function () {
        return 'Auth';
    };
    /**
     * Sign up with username, password and other attributes like phone, email
     * @param {String | object} params - The user attributes used for signin
     * @param {String[]} restOfAttrs - for the backward compatability
     * @return - A promise resolves callback data if success
     */
    AuthClass.prototype.signUp = function (params) {
        var restOfAttrs = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            restOfAttrs[_i - 1] = arguments[_i];
        }
        return _super.prototype.signUp.call(this, params, restOfAttrs);
    };
    /**
     * Send the verification code to confirm sign up
     * @param {String} username - The username to be confirmed
     * @param {String} code - The verification code
     * @param {ConfirmSignUpOptions} options - other options for confirm signup
     * @return - A promise resolves callback data if success
     */
    AuthClass.prototype.confirmSignUp = function (username, code, options) {
        return _super.prototype.confirmSignUp.call(this, username, code, options);
    };
    /**
     * Resend the verification code
     * @param {String} username - The username to be confirmed
     * @param {ClientMetadata} clientMetadata - Metadata to be passed to Cognito Lambda triggers
     * @return - A promise resolves code delivery details if successful
     */
    AuthClass.prototype.resendSignUp = function (username, clientMetadata) {
        return _super.prototype.resendSignUp.call(this, username, clientMetadata);
    };
    /**
     * Sign in
     * @param {String | SignInOpts} usernameOrSignInOpts - The username to be signed in or the sign in options
     * @param {String} pw - The password of the username
     * @param {ClientMetaData} clientMetadata - Client metadata for custom workflows
     * @return - A promise resolves the CognitoUser
     */
    AuthClass.prototype.signIn = function (usernameOrSignInOpts, pw, clientMetadata) {
        return _super.prototype.signIn.call(this, usernameOrSignInOpts, pw, clientMetadata);
    };
    /**
     * This was previously used by an authenticated user to get MFAOptions,
     * but no longer returns a meaningful response. Refer to the documentation for
     * how to setup and use MFA: https://docs.amplify.aws/lib/auth/mfa/q/platform/js
     * @deprecated
     * @param {CognitoUser} user - the current user
     * @return - A promise resolves the current preferred mfa option if success
     */
    AuthClass.prototype.getMFAOptions = function (user) {
        return _super.prototype.getMFAOptions.call(this, user);
    };
    /**
     * get preferred mfa method
     * @param {CognitoUser} user - the current cognito user
     * @param {GetPreferredMFAOpts} params - options for getting the current user preferred MFA
     */
    AuthClass.prototype.getPreferredMFA = function (user, params) {
        return _super.prototype.getPreferredMFA.call(this, user, params);
    };
    /**
     * set preferred MFA method
     * @param {CognitoUser} user - the current Cognito user
     * @param {string} mfaMethod - preferred mfa method
     * @return - A promise resolve if success
     */
    AuthClass.prototype.setPreferredMFA = function (user, mfaMethod) {
        return _super.prototype.setPreferredMFA.call(this, user, mfaMethod);
    };
    /**
     * disable SMS
     * @deprecated
     * @param {CognitoUser} user - the current user
     * @return - A promise resolves is success
     */
    AuthClass.prototype.disableSMS = function (user) {
        return _super.prototype.disableSMS.call(this, user);
    };
    /**
     * enable SMS
     * @deprecated
     * @param {CognitoUser} user - the current user
     * @return - A promise resolves is success
     */
    AuthClass.prototype.enableSMS = function (user) {
        return _super.prototype.enableSMS.call(this, user);
    };
    /**
     * Setup TOTP
     * @param {CognitoUser} user - the current user
     * @return - A promise resolves with the secret code if success
     */
    AuthClass.prototype.setupTOTP = function (user) {
        return _super.prototype.setupTOTP.call(this, user);
    };
    /**
     * verify TOTP setup
     * @param {CognitoUser} user - the current user
     * @param {string} challengeAnswer - challenge answer
     * @return - A promise resolves is success
     */
    AuthClass.prototype.verifyTotpToken = function (user, challengeAnswer) {
        return _super.prototype.verifyTotpToken.call(this, user, challengeAnswer);
    };
    /**
     * Send MFA code to confirm sign in
     * @param {Object} user - The CognitoUser object
     * @param {String} code - The confirmation code
     */
    AuthClass.prototype.confirmSignIn = function (user, code, mfaType, clientMetadata) {
        return _super.prototype.confirmSignIn.call(this, user, code, mfaType, clientMetadata);
    };
    AuthClass.prototype.completeNewPassword = function (user, password, requiredAttributes, clientMetadata) {
        if (requiredAttributes === void 0) { requiredAttributes = {}; }
        return _super.prototype.completeNewPassword.call(this, user, password, requiredAttributes, clientMetadata);
    };
    /**
     * Send the answer to a custom challenge
     * @param {CognitoUser} user - The CognitoUser object
     * @param {String} challengeResponses - The confirmation code
     */
    AuthClass.prototype.sendCustomChallengeAnswer = function (user, challengeResponses, clientMetadata) {
        return _super.prototype.sendCustomChallengeAnswer.call(this, user, challengeResponses, clientMetadata);
    };
    /**
     * Delete an authenticated users' attributes
     * @param {CognitoUser} - The currently logged in user object
     * @return {Promise}
     **/
    AuthClass.prototype.deleteUserAttributes = function (user, attributeNames) {
        return _super.prototype.deleteUserAttributes.call(this, user, attributeNames);
    };
    /**
     * Delete the current authenticated user
     * @return {Promise}
     **/
    // TODO: Check return type void
    AuthClass.prototype.deleteUser = function () {
        return _super.prototype.deleteUser.call(this);
    };
    /**
     * Update an authenticated users' attributes
     * @param {CognitoUser} - The currently logged in user object
     * @return {Promise}
     **/
    AuthClass.prototype.updateUserAttributes = function (user, attributes, clientMetadata) {
        return _super.prototype.updateUserAttributes.call(this, user, attributes, clientMetadata);
    };
    /**
     * Return user attributes
     * @param {Object} user - The CognitoUser object
     * @return - A promise resolves to user attributes if success
     */
    AuthClass.prototype.userAttributes = function (user) {
        return _super.prototype.userAttributes.call(this, user);
    };
    AuthClass.prototype.verifiedContact = function (user) {
        return _super.prototype.verifiedContact.call(this, user);
    };
    /**
     * Get current authenticated user
     * @return - A promise resolves to current authenticated CognitoUser if success
     */
    AuthClass.prototype.currentUserPoolUser = function (params) {
        return _super.prototype.currentUserPoolUser.call(this, params);
    };
    /**
     * Get current authenticated user
     * @param {CurrentUserOpts} - options for getting the current user
     * @return - A promise resolves to current authenticated CognitoUser if success
     */
    AuthClass.prototype.currentAuthenticatedUser = function (params) {
        return _super.prototype.currentAuthenticatedUser.call(this, params);
    };
    /**
     * Get current user's session
     * @return - A promise resolves to session object if success
     */
    AuthClass.prototype.currentSession = function () {
        return _super.prototype.currentSession.call(this);
    };
    /**
     * Get the corresponding user session
     * @param {Object} user - The CognitoUser object
     * @return - A promise resolves to the session
     */
    AuthClass.prototype.userSession = function (user) {
        return _super.prototype.userSession.call(this, user);
    };
    /**
     * Get authenticated credentials of current user.
     * @return - A promise resolves to be current user's credentials
     */
    AuthClass.prototype.currentUserCredentials = function () {
        return _super.prototype.currentUserCredentials.call(this);
    };
    AuthClass.prototype.currentCredentials = function () {
        return _super.prototype.currentCredentials.call(this);
    };
    /**
     * Initiate an attribute confirmation request
     * @param {Object} user - The CognitoUser
     * @param {Object} attr - The attributes to be verified
     * @return - A promise resolves to callback data if success
     */
    AuthClass.prototype.verifyUserAttribute = function (user, attr, clientMetadata) {
        return _super.prototype.verifyUserAttribute.call(this, user, attr, clientMetadata);
    };
    /**
     * Confirm an attribute using a confirmation code
     * @param {Object} user - The CognitoUser
     * @param {Object} attr - The attribute to be verified
     * @param {String} code - The confirmation code
     * @return - A promise resolves to callback data if success
     */
    AuthClass.prototype.verifyUserAttributeSubmit = function (user, attr, code) {
        return _super.prototype.verifyUserAttributeSubmit.call(this, user, attr, code);
    };
    AuthClass.prototype.verifyCurrentUserAttribute = function (attr) {
        return _super.prototype.verifyCurrentUserAttribute.call(this, attr);
    };
    /**
     * Confirm current user's attribute using a confirmation code
     * @param {Object} attr - The attribute to be verified
     * @param {String} code - The confirmation code
     * @return - A promise resolves to callback data if success
     */
    AuthClass.prototype.verifyCurrentUserAttributeSubmit = function (attr, code) {
        return _super.prototype.verifyCurrentUserAttributeSubmit.call(this, attr, code);
    };
    /**
     * Sign out method
     * @
     * @return - A promise resolved if success
     */
    AuthClass.prototype.signOut = function (opts) {
        return _super.prototype.signOut.call(this, opts);
    };
    /**
     * Change a password for an authenticated user
     * @param {Object} user - The CognitoUser object
     * @param {String} oldPassword - the current password
     * @param {String} newPassword - the requested new password
     * @return - A promise resolves if success
     */
    AuthClass.prototype.changePassword = function (user, oldPassword, newPassword, clientMetadata) {
        return _super.prototype.changePassword.call(this, user, oldPassword, newPassword, clientMetadata);
    };
    /**
     * Initiate a forgot password request
     * @param {String} username - the username to change password
     * @return - A promise resolves if success
     */
    AuthClass.prototype.forgotPassword = function (username, clientMetadata) {
        return _super.prototype.forgotPassword.call(this, username, clientMetadata);
    };
    /**
     * Confirm a new password using a confirmation Code
     * @param {String} username - The username
     * @param {String} code - The confirmation code
     * @param {String} password - The new password
     * @return - A promise that resolves if success
     */
    AuthClass.prototype.forgotPasswordSubmit = function (username, code, password, clientMetadata) {
        return _super.prototype.forgotPasswordSubmit.call(this, username, code, password, clientMetadata);
    };
    /**
     * Get user information
     * @async
     * @return {Object }- current User's information
     */
    AuthClass.prototype.currentUserInfo = function () {
        return _super.prototype.currentUserInfo.call(this);
    };
    AuthClass.prototype.federatedSignIn = function (providerOrOptions, response, user) {
        return _super.prototype.federatedSignIn.call(this, providerOrOptions, response, user);
    };
    /**
     * Compact version of credentials
     * @param {Object} credentials
     * @return {Object} - Credentials
     */
    AuthClass.prototype.essentialCredentials = function (credentials) {
        return _super.prototype.essentialCredentials.call(this, credentials);
    };
    AuthClass.prototype.rememberDevice = function () {
        return _super.prototype.rememberDevice.call(this);
    };
    AuthClass.prototype.forgetDevice = function () {
        return _super.prototype.forgetDevice.call(this);
    };
    AuthClass.prototype.fetchDevices = function () {
        return _super.prototype.fetchDevices.call(this);
    };
    return AuthClass;
}(InternalAuth_1.InternalAuthClass));
exports.AuthClass = AuthClass;
exports.Auth = new AuthClass(null);
core_1.Amplify.register(exports.Auth);
//# sourceMappingURL=Auth.js.map